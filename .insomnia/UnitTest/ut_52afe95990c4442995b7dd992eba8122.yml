_id: ut_52afe95990c4442995b7dd992eba8122
type: UnitTest
parentId: uts_d4583e1c96c04cb9bcaecc35ac7cc81a
modified: 1708629065101
created: 1708629065101
requestId: req_58af74c4580f46f1864dd7f925677b67
name: Finds Pets by tags
code: >-
  // Auto-generated with Insomnia AI


  const response = await insomnia.send();


  // Parse the response body

  const body = JSON.parse(response.data);


  // Check the status code

  expect(response.status).to.equal(200);


  // Check the response time

  expect(response.responseTime).to.be.a('number');


  // Check the response body

  expect(body).to.be.an('array');

  body.forEach(pet => {
    expect(pet).to.be.an('object');
    expect(pet).to.have.property('name').that.is.a('string');
    expect(pet).to.have.property('photoUrls').that.is.an('array');
    pet.photoUrls.forEach(url => expect(url).to.be.a('string'));
    if (pet.hasOwnProperty('tags')) {
      expect(pet.tags).to.be.an('array');
      pet.tags.forEach(tag => {
        expect(tag).to.be.an('object');
        expect(tag).to.have.property('id').that.is.a('number');
        expect(tag).to.have.property('name').that.is.a('string');
      });
    }
    if (pet.hasOwnProperty('category')) {
      expect(pet.category).to.be.an('object');
      expect(pet.category).to.have.property('id').that.is.a('number');
      expect(pet.category).to.have.property('name').that.is.a('string');
    }
    expect(pet).to.have.property('status').that.is.oneOf(['available', 'pending', 'sold']);
  });
